"use strict";

exports.__esModule = true;
exports.get = get;
exports.trim = trim;
exports.saveSelection = saveSelection;
exports.restoreSelection = restoreSelection;
exports.defaultProps = exports.noop = void 0;

var _react = require("react");

var noop = function noop() {
  return void 0;
};

exports.noop = noop;

function getDisplayName(WrappedComponent) {
  if (typeof WrappedComponent === 'string') {
    return WrappedComponent;
  }

  if (!WrappedComponent) {
    return void 0;
  }

  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}

var defaultProps = function defaultProps(props) {
  return function (BaseComponent) {
    var DefaultProps = function DefaultProps(ownerProps) {
      return (0, _react.createElement)(BaseComponent, ownerProps);
    };

    DefaultProps.defaultProps = props;

    if (process.env.NODE_ENV !== 'production') {
      DefaultProps.displayName = "defaultProps(" + getDisplayName(BaseComponent) + ")";
    }

    return DefaultProps;
  };
};

exports.defaultProps = defaultProps;

function getPath(obj, path) {
  if (obj[path] != null) {
    return [path];
  }

  if (Array.isArray(path)) {
    return path;
  }

  return path.split('.');
}

function get(obj, path) {
  var objectByPath = obj;
  var pathArray = getPath(obj, path);
  var length = pathArray.length;

  for (var i = 0; objectByPath !== null && i < length; i += 1) {
    objectByPath = objectByPath[pathArray[i]];
  }

  return objectByPath;
}

function trim(str, chars) {
  return str.replace(new RegExp("^[" + chars + "]+", 'g'), '').replace(new RegExp("[" + chars + "]+$", 'g'), '');
}

function saveSelection(target) {
  if (target.selectionStart !== void 0) {
    return {
      start: target.selectionStart,
      end: target.selectionEnd
    };
  }

  if (document.selection) {
    // IE support
    target.focus(); // To get cursor position, get empty selection range

    var selectionRange = document.selection.createRange(); // Move selection start to 0 position

    selectionRange.moveStart('character', -target.value.length); // The cursor position is selection length

    var start = selectionRange.text.length;
    return {
      start: start,
      end: start
    };
  }

  return {
    start: 0,
    end: 0
  };
}

function restoreSelection(target, _ref) {
  var start = _ref.start,
      end = _ref.end;

  if (!target || start === void 0 || target === document.activeElement && target.selectionStart === start && target.selectionEnd === end) {
    return;
  }

  if ((target.type === 'text' || target.type === 'textarea') && target === document.activeElement) {
    if (target.setSelectionRange) {
      target.setSelectionRange(start, end);
    } else if (target.createTextRange) {
      var range = target.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end);
      range.select();
    }
  }
}