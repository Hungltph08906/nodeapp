"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("./constants");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_PROPS = {
  onChange: _utils.noop,
  onClick: _utils.noop,
  onFocus: _utils.noop,
  decimalMark: '.',
  numberColor: false,
  alternateDecimalMark: ',',
  trimOnPaste: true
};
var DEFAULT_SEPARATORS = {
  '.': [',', '\'', '’', ' '],
  ',': [' ', '.'],
  '·': [','],
  '\'': ['.']
};

var makeRegexpForReplace = function makeRegexpForReplace(symbols) {
  return new RegExp("[" + (Array.isArray(symbols) ? symbols.join('') : symbols).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(' ', '\\s') + "]", 'g');
};

var withControl = function withControl(Child) {
  var Controlled = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Controlled, _React$Component);

    function Controlled() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      _defineProperty(_assertThisInitialized(_this), "afterUpdate", null);

      _defineProperty(_assertThisInitialized(_this), "getId", function () {
        return "labeled-control-" + _this.props.id;
      });

      _defineProperty(_assertThisInitialized(_this), "getPath", function () {
        return _this.props.path || _this.props.id;
      });

      _defineProperty(_assertThisInitialized(_this), "getValue", function () {
        return _this.props.value !== void 0 ? _this.props.value : (0, _utils.get)(_this.props.state, _this.getPath());
      });

      _defineProperty(_assertThisInitialized(_this), "getThousandsSeparator", function () {
        return _this.props.thousandsSeparator || DEFAULT_SEPARATORS[_this.props.decimalMark];
      });

      _defineProperty(_assertThisInitialized(_this), "getColorIfNumber", function () {
        return typeof _this.getValue() === 'number' ? _this.props.numberColor : void 0;
      });

      _defineProperty(_assertThisInitialized(_this), "prepareNum", function (num) {
        return num.replace(_this.getThousandsSeparator() ? makeRegexpForReplace(_this.getThousandsSeparator()) : null, '').replace(makeRegexpForReplace(_this.props.alternateDecimalMark), '.').replace(_this.props.decimalMark, '.');
      });

      _defineProperty(_assertThisInitialized(_this), "wasNumber", function (valueForCheck, previousType) {
        return !Number.isNaN(Number(valueForCheck)) && valueForCheck.length || previousType === 'number' && !valueForCheck.length && _this.props.defaultNum;
      });

      _defineProperty(_assertThisInitialized(_this), "processNewValue", function (_ref, isRemoveZeros) {
        var value = _ref.value,
            checked = _ref.checked,
            type = _ref.type;
        var previousType = typeof _this.getValue();
        var valueForReturn = value;

        if (previousType === 'boolean' || type === 'checkbox') {
          _this.props.onChange(_this.getPath(), checked);

          return;
        }

        var valueForCheck = _this.prepareNum(valueForReturn);

        if (isRemoveZeros) {
          var match = new RegExp('^(\\d+\\.(?:0*(?:\\d?[1-9])+)?)0*$').exec(valueForCheck);

          if (match && match[1]) {
            valueForCheck = match[1];

            if (/\.$/.test(valueForCheck)) {
              valueForCheck = valueForCheck.slice(0, -1);
            }
          }
        }

        if (_this.wasNumber(valueForCheck, previousType) && !/(\.|\s|\.[0-9]*0)$/.test(valueForCheck)) {
          var parseFunc = /\./.test(valueForCheck) ? parseFloat : parseInt;
          valueForReturn = parseFunc(valueForCheck, 10) || _this.props.defaultNum || 0;
        }

        _this.props.onChange(_this.getPath(), valueForReturn);
      });

      _defineProperty(_assertThisInitialized(_this), "changeHandler", function (_ref2) {
        var target = _ref2.target;
        var value = target.value,
            checked = target.checked,
            type = target.type;

        _this.processNewValue({
          value: value,
          checked: checked,
          type: type
        });
      });

      _defineProperty(_assertThisInitialized(_this), "pasteHandler", function (event) {
        event.preventDefault();
        var target = event.target,
            clipboardData = event.clipboardData;
        var selectionStart = target.selectionStart,
            selectionEnd = target.selectionEnd,
            checked = target.checked,
            type = target.type;
        var value = clipboardData.getData('Text');

        if (_this.props.trimOnPaste) {
          value = (0, _utils.trim)(value, ' \\t\\n');
        }

        var selectionPosition = selectionStart;

        if (value.toString) {
          selectionPosition += value.toString().length;
        }

        var currentValue = _this.getValue();

        if (currentValue && currentValue.toString) {
          var selectionLength = selectionEnd - selectionStart;
          var newValue = currentValue.toString().split('');
          newValue.splice(selectionStart, selectionLength, value);
          value = newValue.join('');
        }

        _this.afterUpdate = function () {
          target.setSelectionRange(selectionPosition, selectionPosition);
        };

        _this.processNewValue({
          value: value,
          checked: checked,
          type: type
        }, _this.props.trimOnPaste);
      });

      _defineProperty(_assertThisInitialized(_this), "clickHandler", function (that) {
        return function () {
          return _this.props.onClick(that.control);
        };
      });

      _defineProperty(_assertThisInitialized(_this), "focusHandler", function (that) {
        return function () {
          return _this.props.onFocus(that.control);
        };
      });

      _defineProperty(_assertThisInitialized(_this), "formatNum", function (num) {
        if (num === void 0) {
          num = _this.getValue();
        }

        return num.toString().replace('.', _this.props.decimalMark);
      });

      _defineProperty(_assertThisInitialized(_this), "showValue", function () {
        var value = _this.getValue();

        switch (typeof value) {
          case 'number':
            return _this.props.values ? value : _this.formatNum();

          case 'boolean':
          case 'string':
            return value;

          default:
            return value === void 0 ? value : value.toString();
        }
      });

      _defineProperty(_assertThisInitialized(_this), "refHandler", function (that) {
        return function (control) {
          // The parameter reassign is needed for simplifying controlled components
          // eslint-disable-next-line no-param-reassign
          that.control = control;
        };
      });

      return _this;
    }

    var _proto = Controlled.prototype;

    _proto.componentDidUpdate = function componentDidUpdate() {
      if (this.afterUpdate) {
        this.afterUpdate();
        this.afterUpdate = null;
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          id = _this$props.id,
          state = _this$props.state,
          path = _this$props.path,
          value = _this$props.value,
          defaultNum = _this$props.defaultNum,
          onChange = _this$props.onChange,
          onClick = _this$props.onClick,
          onFocus = _this$props.onFocus,
          decimalMark = _this$props.decimalMark,
          numberColor = _this$props.numberColor,
          thousandsSeparator = _this$props.thousandsSeparator,
          alternateDecimalMark = _this$props.alternateDecimalMark,
          trimOnPaste = _this$props.trimOnPaste,
          passedProps = _objectWithoutPropertiesLoose(_this$props, ["id", "state", "path", "value", "defaultNum", "onChange", "onClick", "onFocus", "decimalMark", "numberColor", "thousandsSeparator", "alternateDecimalMark", "trimOnPaste"]);

      return /*#__PURE__*/_react["default"].createElement(Child, _extends({}, passedProps, {
        id: this.getId(),
        value: this.showValue(),
        onChange: this.changeHandler,
        onPaste: this.pasteHandler,
        onClick: this.clickHandler,
        onFocus: this.focusHandler,
        refHandler: this.refHandler,
        numberColor: this.getColorIfNumber()
      }));
    };

    return Controlled;
  }(_react["default"].Component);

  Controlled.propTypes = process.env.NODE_ENV !== "production" ? {
    id: _propTypes["default"].string.isRequired,
    // state may contain not controlled parameters too
    state: _propTypes["default"].objectOf(_propTypes["default"].any),
    path: _propTypes["default"].string,
    value: _constants.VALUE_TYPE,
    values: _propTypes["default"].arrayOf(_constants.VALUE_TYPE),
    defaultNum: _propTypes["default"].number,
    onChange: _propTypes["default"].func,
    onClick: _propTypes["default"].func,
    onFocus: _propTypes["default"].func,
    decimalMark: _propTypes["default"].string,
    numberColor: _constants.NUMBER_COLOR_TYPE,
    thousandsSeparator: _constants.MARK_TYPE,
    alternateDecimalMark: _constants.MARK_TYPE,
    trimOnPaste: _propTypes["default"].bool
  } : {};
  return Controlled;
};

var _default = function _default(component) {
  return (0, _utils.defaultProps)(DEFAULT_PROPS)(withControl(component));
};

exports["default"] = _default;
module.exports = exports.default;