function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { NUMBER_COLOR_TYPE } from '../common/constants';
import controlled from '../common/controlled';
import { noop } from '../common/utils';

var Check = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Check, _React$PureComponent);

  function Check() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Check.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        value = _this$props.value,
        refHandler = _this$props.refHandler,
        onClick = _this$props.onClick,
        onFocus = _this$props.onFocus,
        label = _this$props.label,
        readOnly = _this$props.readOnly,
        numberColor = _this$props.numberColor,
        type = _this$props.type,
        passedProps = _objectWithoutPropertiesLoose(_this$props, ["className", "value", "refHandler", "onClick", "onFocus", "label", "readOnly", "numberColor", "type"]);

    return /*#__PURE__*/React.createElement("div", {
      className: className
    }, /*#__PURE__*/React.createElement("input", _extends({
      type: "checkbox",
      checked: value,
      ref: refHandler(this),
      onClick: onClick(this),
      onFocus: onFocus(this),
      disabled: readOnly,
      style: {
        marginBottom: '0.8em',
        marginLeft: '1px'
      }
    }, passedProps)), /*#__PURE__*/React.createElement("label", {
      htmlFor: this.props.id
    }, label));
  };

  return Check;
}(React.PureComponent);

_defineProperty(Check, "defaultProps", {
  className: '',
  label: '',
  value: false,
  refHandler: noop,
  onClick: noop,
  onFocus: noop,
  readOnly: false,
  numberColor: false
});

Check.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  id: PropTypes.string.isRequired,
  label: PropTypes.string,
  value: PropTypes.bool,
  refHandler: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  readOnly: PropTypes.bool,
  numberColor: NUMBER_COLOR_TYPE
} : {};
export default controlled(Check);