function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { NUMBER_COLOR_TYPE } from '../common/constants';
import controlled from '../common/controlled';
import { noop } from '../common/utils';
var valueType = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.string, PropTypes.number]) : {};

var Radio = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Radio, _React$PureComponent);

  function Radio() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Radio.prototype;

  _proto.render = function render() {
    var _this = this;

    var _this$props = this.props,
        className = _this$props.className,
        id = _this$props.id,
        label = _this$props.label,
        suffix = _this$props.suffix,
        values = _this$props.values,
        value = _this$props.value,
        refHandler = _this$props.refHandler,
        onClick = _this$props.onClick,
        onFocus = _this$props.onFocus,
        readOnly = _this$props.readOnly,
        numberColor = _this$props.numberColor,
        passedProps = _objectWithoutPropertiesLoose(_this$props, ["className", "id", "label", "suffix", "values", "value", "refHandler", "onClick", "onFocus", "readOnly", "numberColor"]);

    return /*#__PURE__*/React.createElement("div", {
      className: className,
      id: id,
      style: {
        marginBottom: '0.8em'
      }
    }, label, values.map(function (currentValue) {
      var variantId = id + "-" + currentValue;
      return /*#__PURE__*/React.createElement("div", {
        key: variantId
      }, /*#__PURE__*/React.createElement("input", _extends({
        id: variantId,
        name: id,
        type: "radio",
        checked: value === currentValue,
        value: currentValue,
        ref: refHandler(_this),
        onClick: onClick(_this),
        onFocus: onFocus(_this),
        disabled: readOnly,
        style: {
          margin: '3px 3px 2px 5px'
        }
      }, passedProps)), /*#__PURE__*/React.createElement("label", {
        htmlFor: variantId
      }, currentValue.label || currentValue));
    }), suffix);
  };

  return Radio;
}(React.PureComponent);

_defineProperty(Radio, "defaultProps", {
  className: '',
  id: '',
  label: '',
  suffix: '',
  value: '',
  values: [],
  refHandler: noop,
  onClick: noop,
  onFocus: noop,
  readOnly: false,
  numberColor: false
});

Radio.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  id: PropTypes.string,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  suffix: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  value: valueType,
  values: PropTypes.arrayOf(valueType),
  refHandler: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  readOnly: PropTypes.bool,
  numberColor: NUMBER_COLOR_TYPE
} : {};
export default controlled(Radio);